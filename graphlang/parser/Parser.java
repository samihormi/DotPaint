/* This file was generated by SableCC (http://www.sablecc.org/). */

package graphlang.parser;

import graphlang.lexer.*;
import graphlang.node.*;
import graphlang.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AProgram */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce ADefProgram */
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;
                    case 2: /* reduce AStmtStmtlist */
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;
                    case 3: /* reduce AListStmtlist */
		    {
			ArrayList list = new3();
			push(goTo(1), list);
		    }
		    break;
                    case 4: /* reduce AMoveStmt */
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;
                    case 5: /* reduce ADrawStmt */
		    {
			ArrayList list = new5();
			push(goTo(2), list);
		    }
		    break;
                    case 6: /* reduce AFillStmt */
		    {
			ArrayList list = new6();
			push(goTo(2), list);
		    }
		    break;
                    case 7: /* reduce ADefineDefinegrid */
		    {
			ArrayList list = new7();
			push(goTo(3), list);
		    }
		    break;
                    case 8: /* reduce AMoveMove */
		    {
			ArrayList list = new8();
			push(goTo(4), list);
		    }
		    break;
                    case 9: /* reduce AConnDraw */
		    {
			ArrayList list = new9();
			push(goTo(5), list);
		    }
		    break;
                    case 10: /* reduce ACircl$Amakecirclecircle11Draw */
		    {
			ArrayList list = new10();
			push(goTo(5), list);
		    }
		    break;
                    case 11: /* reduce ACircl$Amakecirclecircle31Draw */
		    {
			ArrayList list = new11();
			push(goTo(5), list);
		    }
		    break;
                    case 12: /* reduce ACircl$Amakecirclecircle41Draw */
		    {
			ArrayList list = new12();
			push(goTo(5), list);
		    }
		    break;
                    case 13: /* reduce AErasecolDraw */
		    {
			ArrayList list = new13();
			push(goTo(5), list);
		    }
		    break;
                    case 14: /* reduce ASqua$Amakesquaresquare11Draw */
		    {
			ArrayList list = new14();
			push(goTo(5), list);
		    }
		    break;
                    case 15: /* reduce ASqua$Amakesquaresquare31Draw */
		    {
			ArrayList list = new15();
			push(goTo(5), list);
		    }
		    break;
                    case 16: /* reduce ASqua$Amakesquaresquare41Draw */
		    {
			ArrayList list = new16();
			push(goTo(5), list);
		    }
		    break;
                    case 17: /* reduce ATria$Amaketriangletriangle11Draw */
		    {
			ArrayList list = new17();
			push(goTo(5), list);
		    }
		    break;
                    case 18: /* reduce ATria$Amaketriangletriangle31Draw */
		    {
			ArrayList list = new18();
			push(goTo(5), list);
		    }
		    break;
                    case 19: /* reduce ATria$Amaketriangletriangle41Draw */
		    {
			ArrayList list = new19();
			push(goTo(5), list);
		    }
		    break;
                    case 20: /* reduce ATria$Amaketriangletriangle51Draw */
		    {
			ArrayList list = new20();
			push(goTo(5), list);
		    }
		    break;
                    case 21: /* reduce ATria$Amaketriangletriangle61Draw */
		    {
			ArrayList list = new21();
			push(goTo(5), list);
		    }
		    break;
                    case 22: /* reduce ATria$Amaketriangletriangle71Draw */
		    {
			ArrayList list = new22();
			push(goTo(5), list);
		    }
		    break;
                    case 23: /* reduce ATria$Amaketriangletriangle81Draw */
		    {
			ArrayList list = new23();
			push(goTo(5), list);
		    }
		    break;
                    case 24: /* reduce ARecta$Amakerectanglerectangle11Draw */
		    {
			ArrayList list = new24();
			push(goTo(5), list);
		    }
		    break;
                    case 25: /* reduce ARecta$Amakerectanglerectangle31Draw */
		    {
			ArrayList list = new25();
			push(goTo(5), list);
		    }
		    break;
                    case 26: /* reduce ARecta$Amakerectanglerectangle41Draw */
		    {
			ArrayList list = new26();
			push(goTo(5), list);
		    }
		    break;
                    case 27: /* reduce ARhom$Amakerhombusrhombus11Draw */
		    {
			ArrayList list = new27();
			push(goTo(5), list);
		    }
		    break;
                    case 28: /* reduce ARhom$Amakerhombusrhombus31Draw */
		    {
			ArrayList list = new28();
			push(goTo(5), list);
		    }
		    break;
                    case 29: /* reduce ARhom$Amakerhombusrhombus41Draw */
		    {
			ArrayList list = new29();
			push(goTo(5), list);
		    }
		    break;
                    case 30: /* reduce AFillrColorize */
		    {
			ArrayList list = new30();
			push(goTo(6), list);
		    }
		    break;
                    case 31: /* reduce AMarkConnect */
		    {
			ArrayList list = new31();
			push(goTo(7), list);
		    }
		    break;
                    case 32: /* reduce AConnectcolConnect */
		    {
			ArrayList list = new32();
			push(goTo(7), list);
		    }
		    break;
                    case 33: /* reduce AChoosecolConnect */
		    {
			ArrayList list = new33();
			push(goTo(7), list);
		    }
		    break;
                    case 34: /* reduce AConnectcolorConnectcolor */
		    {
			ArrayList list = new34();
			push(goTo(8), list);
		    }
		    break;
                    case 35: /* reduce AChooseChoosecolor */
		    {
			ArrayList list = new35();
			push(goTo(9), list);
		    }
		    break;
                    case 36: /* reduce AMarkpoint */
		    {
			ArrayList list = new36();
			push(goTo(10), list);
		    }
		    break;
                    case 37: /* reduce AErasecolorErase */
		    {
			ArrayList list = new37();
			push(goTo(11), list);
		    }
		    break;
                    case 38: /* reduce ATerminal$Color */
		    {
			ArrayList list = new38();
			push(goTo(12), list);
		    }
		    break;
                    case 39: /* reduce ANonTerminal$Color */
		    {
			ArrayList list = new39();
			push(goTo(12), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PDefinegrid pdefinegridNode2;
        PStmtlist pstmtlistNode3;
        pdefinegridNode2 = (PDefinegrid)nodeArrayList1.get(0);
        pstmtlistNode3 = (PStmtlist)nodeArrayList2.get(0);

        pprogramNode1 = new AProgram(pdefinegridNode2, pstmtlistNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce ADefProgram */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PDefinegrid pdefinegridNode2;
        pdefinegridNode2 = (PDefinegrid)nodeArrayList1.get(0);

        pprogramNode1 = new ADefProgram(pdefinegridNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AStmtStmtlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmtlist pstmtlistNode1;
        {
            // Block
        PStmt pstmtNode2;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);

        pstmtlistNode1 = new AStmtStmtlist(pstmtNode2);
        }
	nodeList.add(pstmtlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AListStmtlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmtlist pstmtlistNode1;
        {
            // Block
        PStmt pstmtNode2;
        PStmtlist pstmtlistNode3;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);
        pstmtlistNode3 = (PStmtlist)nodeArrayList2.get(0);

        pstmtlistNode1 = new AListStmtlist(pstmtNode2, pstmtlistNode3);
        }
	nodeList.add(pstmtlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AMoveStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PMove pmoveNode2;
        pmoveNode2 = (PMove)nodeArrayList1.get(0);

        pstmtNode1 = new AMoveStmt(pmoveNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce ADrawStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PDraw pdrawNode2;
        pdrawNode2 = (PDraw)nodeArrayList1.get(0);

        pstmtNode1 = new ADrawStmt(pdrawNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AFillStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PColorize pcolorizeNode2;
        pcolorizeNode2 = (PColorize)nodeArrayList1.get(0);

        pstmtNode1 = new AFillStmt(pcolorizeNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce ADefineDefinegrid */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDefinegrid pdefinegridNode1;
        {
            // Block
        TKeywordgrid tkeywordgridNode2;
        TNumber tnumberNode3;
        tkeywordgridNode2 = (TKeywordgrid)nodeArrayList1.get(0);
        tnumberNode3 = (TNumber)nodeArrayList2.get(0);

        pdefinegridNode1 = new ADefineDefinegrid(tkeywordgridNode2, tnumberNode3);
        }
	nodeList.add(pdefinegridNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AMoveMove */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMove pmoveNode1;
        {
            // Block
        TDirection tdirectionNode2;
        TNumber tnumberNode3;
        tdirectionNode2 = (TDirection)nodeArrayList1.get(0);
        tnumberNode3 = (TNumber)nodeArrayList2.get(0);

        pmoveNode1 = new AMoveMove(tdirectionNode2, tnumberNode3);
        }
	nodeList.add(pmoveNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AConnDraw */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDraw pdrawNode1;
        {
            // Block
        PConnect pconnectNode2;
        pconnectNode2 = (PConnect)nodeArrayList1.get(0);

        pdrawNode1 = new AConnDraw(pconnectNode2);
        }
	nodeList.add(pdrawNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce ACircl$Amakecirclecircle11Draw */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDraw pdrawNode1;
        {
            // Block
        PCircle pcircleNode2;
        {
            // Block
        TKeywordcircle tkeywordcircleNode3;
        TNumber tnumberNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        @SuppressWarnings("unused") Object nullNode6 = null;
        tkeywordcircleNode3 = (TKeywordcircle)nodeArrayList1.get(0);
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);

        pcircleNode2 = new AMakecircleCircle(tkeywordcircleNode3, tnumberNode4, null, null);
        }

        pdrawNode1 = new ACirclDraw(pcircleNode2);
        }
	nodeList.add(pdrawNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce ACircl$Amakecirclecircle31Draw */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDraw pdrawNode1;
        {
            // Block
        PCircle pcircleNode2;
        {
            // Block
        TKeywordcircle tkeywordcircleNode3;
        TNumber tnumberNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TColor tcolorNode6;
        tkeywordcircleNode3 = (TKeywordcircle)nodeArrayList1.get(0);
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);
        tcolorNode6 = (TColor)nodeArrayList3.get(0);

        pcircleNode2 = new AMakecircleCircle(tkeywordcircleNode3, tnumberNode4, null, tcolorNode6);
        }

        pdrawNode1 = new ACirclDraw(pcircleNode2);
        }
	nodeList.add(pdrawNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce ACircl$Amakecirclecircle41Draw */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDraw pdrawNode1;
        {
            // Block
        PCircle pcircleNode2;
        {
            // Block
        TKeywordcircle tkeywordcircleNode3;
        TNumber tnumberNode4;
        TColor tcolorNode5;
        TColor tcolorNode6;
        tkeywordcircleNode3 = (TKeywordcircle)nodeArrayList1.get(0);
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);
        tcolorNode5 = (TColor)nodeArrayList3.get(0);
        tcolorNode6 = (TColor)nodeArrayList4.get(0);

        pcircleNode2 = new AMakecircleCircle(tkeywordcircleNode3, tnumberNode4, tcolorNode5, tcolorNode6);
        }

        pdrawNode1 = new ACirclDraw(pcircleNode2);
        }
	nodeList.add(pdrawNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AErasecolDraw */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDraw pdrawNode1;
        {
            // Block
        PErase peraseNode2;
        peraseNode2 = (PErase)nodeArrayList1.get(0);

        pdrawNode1 = new AErasecolDraw(peraseNode2);
        }
	nodeList.add(pdrawNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce ASqua$Amakesquaresquare11Draw */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDraw pdrawNode1;
        {
            // Block
        PSquare psquareNode2;
        {
            // Block
        TKeywordsquare tkeywordsquareNode3;
        TNumber tnumberNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        @SuppressWarnings("unused") Object nullNode6 = null;
        tkeywordsquareNode3 = (TKeywordsquare)nodeArrayList1.get(0);
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);

        psquareNode2 = new AMakesquareSquare(tkeywordsquareNode3, tnumberNode4, null, null);
        }

        pdrawNode1 = new ASquaDraw(psquareNode2);
        }
	nodeList.add(pdrawNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce ASqua$Amakesquaresquare31Draw */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDraw pdrawNode1;
        {
            // Block
        PSquare psquareNode2;
        {
            // Block
        TKeywordsquare tkeywordsquareNode3;
        TNumber tnumberNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TColor tcolorNode6;
        tkeywordsquareNode3 = (TKeywordsquare)nodeArrayList1.get(0);
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);
        tcolorNode6 = (TColor)nodeArrayList3.get(0);

        psquareNode2 = new AMakesquareSquare(tkeywordsquareNode3, tnumberNode4, null, tcolorNode6);
        }

        pdrawNode1 = new ASquaDraw(psquareNode2);
        }
	nodeList.add(pdrawNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce ASqua$Amakesquaresquare41Draw */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDraw pdrawNode1;
        {
            // Block
        PSquare psquareNode2;
        {
            // Block
        TKeywordsquare tkeywordsquareNode3;
        TNumber tnumberNode4;
        TColor tcolorNode5;
        TColor tcolorNode6;
        tkeywordsquareNode3 = (TKeywordsquare)nodeArrayList1.get(0);
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);
        tcolorNode5 = (TColor)nodeArrayList3.get(0);
        tcolorNode6 = (TColor)nodeArrayList4.get(0);

        psquareNode2 = new AMakesquareSquare(tkeywordsquareNode3, tnumberNode4, tcolorNode5, tcolorNode6);
        }

        pdrawNode1 = new ASquaDraw(psquareNode2);
        }
	nodeList.add(pdrawNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce ATria$Amaketriangletriangle11Draw */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDraw pdrawNode1;
        {
            // Block
        PTriangle ptriangleNode2;
        {
            // Block
        TKeywordtriangle tkeywordtriangleNode3;
        TNumber tnumberNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        @SuppressWarnings("unused") Object nullNode6 = null;
        @SuppressWarnings("unused") Object nullNode7 = null;
        tkeywordtriangleNode3 = (TKeywordtriangle)nodeArrayList1.get(0);
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);

        ptriangleNode2 = new AMaketriangleTriangle(tkeywordtriangleNode3, tnumberNode4, null, null, null);
        }

        pdrawNode1 = new ATriaDraw(ptriangleNode2);
        }
	nodeList.add(pdrawNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce ATria$Amaketriangletriangle31Draw */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDraw pdrawNode1;
        {
            // Block
        PTriangle ptriangleNode2;
        {
            // Block
        TKeywordtriangle tkeywordtriangleNode3;
        TNumber tnumberNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TTritype ttritypeNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        tkeywordtriangleNode3 = (TKeywordtriangle)nodeArrayList1.get(0);
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);
        ttritypeNode6 = (TTritype)nodeArrayList3.get(0);

        ptriangleNode2 = new AMaketriangleTriangle(tkeywordtriangleNode3, tnumberNode4, null, ttritypeNode6, null);
        }

        pdrawNode1 = new ATriaDraw(ptriangleNode2);
        }
	nodeList.add(pdrawNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce ATria$Amaketriangletriangle41Draw */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDraw pdrawNode1;
        {
            // Block
        PTriangle ptriangleNode2;
        {
            // Block
        TKeywordtriangle tkeywordtriangleNode3;
        TNumber tnumberNode4;
        TColor tcolorNode5;
        TTritype ttritypeNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        tkeywordtriangleNode3 = (TKeywordtriangle)nodeArrayList1.get(0);
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);
        tcolorNode5 = (TColor)nodeArrayList3.get(0);
        ttritypeNode6 = (TTritype)nodeArrayList4.get(0);

        ptriangleNode2 = new AMaketriangleTriangle(tkeywordtriangleNode3, tnumberNode4, tcolorNode5, ttritypeNode6, null);
        }

        pdrawNode1 = new ATriaDraw(ptriangleNode2);
        }
	nodeList.add(pdrawNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce ATria$Amaketriangletriangle51Draw */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDraw pdrawNode1;
        {
            // Block
        PTriangle ptriangleNode2;
        {
            // Block
        TKeywordtriangle tkeywordtriangleNode3;
        TNumber tnumberNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TColor tcolorNode7;
        tkeywordtriangleNode3 = (TKeywordtriangle)nodeArrayList1.get(0);
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);
        tcolorNode7 = (TColor)nodeArrayList3.get(0);

        ptriangleNode2 = new AMaketriangleTriangle(tkeywordtriangleNode3, tnumberNode4, null, null, tcolorNode7);
        }

        pdrawNode1 = new ATriaDraw(ptriangleNode2);
        }
	nodeList.add(pdrawNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce ATria$Amaketriangletriangle61Draw */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDraw pdrawNode1;
        {
            // Block
        PTriangle ptriangleNode2;
        {
            // Block
        TKeywordtriangle tkeywordtriangleNode3;
        TNumber tnumberNode4;
        TColor tcolorNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TColor tcolorNode7;
        tkeywordtriangleNode3 = (TKeywordtriangle)nodeArrayList1.get(0);
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);
        tcolorNode5 = (TColor)nodeArrayList3.get(0);
        tcolorNode7 = (TColor)nodeArrayList4.get(0);

        ptriangleNode2 = new AMaketriangleTriangle(tkeywordtriangleNode3, tnumberNode4, tcolorNode5, null, tcolorNode7);
        }

        pdrawNode1 = new ATriaDraw(ptriangleNode2);
        }
	nodeList.add(pdrawNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce ATria$Amaketriangletriangle71Draw */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDraw pdrawNode1;
        {
            // Block
        PTriangle ptriangleNode2;
        {
            // Block
        TKeywordtriangle tkeywordtriangleNode3;
        TNumber tnumberNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TTritype ttritypeNode6;
        TColor tcolorNode7;
        tkeywordtriangleNode3 = (TKeywordtriangle)nodeArrayList1.get(0);
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);
        ttritypeNode6 = (TTritype)nodeArrayList3.get(0);
        tcolorNode7 = (TColor)nodeArrayList4.get(0);

        ptriangleNode2 = new AMaketriangleTriangle(tkeywordtriangleNode3, tnumberNode4, null, ttritypeNode6, tcolorNode7);
        }

        pdrawNode1 = new ATriaDraw(ptriangleNode2);
        }
	nodeList.add(pdrawNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce ATria$Amaketriangletriangle81Draw */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDraw pdrawNode1;
        {
            // Block
        PTriangle ptriangleNode2;
        {
            // Block
        TKeywordtriangle tkeywordtriangleNode3;
        TNumber tnumberNode4;
        TColor tcolorNode5;
        TTritype ttritypeNode6;
        TColor tcolorNode7;
        tkeywordtriangleNode3 = (TKeywordtriangle)nodeArrayList1.get(0);
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);
        tcolorNode5 = (TColor)nodeArrayList3.get(0);
        ttritypeNode6 = (TTritype)nodeArrayList4.get(0);
        tcolorNode7 = (TColor)nodeArrayList5.get(0);

        ptriangleNode2 = new AMaketriangleTriangle(tkeywordtriangleNode3, tnumberNode4, tcolorNode5, ttritypeNode6, tcolorNode7);
        }

        pdrawNode1 = new ATriaDraw(ptriangleNode2);
        }
	nodeList.add(pdrawNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce ARecta$Amakerectanglerectangle11Draw */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDraw pdrawNode1;
        {
            // Block
        PRectangle prectangleNode2;
        {
            // Block
        TKeywordrectangle tkeywordrectangleNode3;
        TNumber tnumberNode4;
        TNumber tnumberNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        @SuppressWarnings("unused") Object nullNode7 = null;
        tkeywordrectangleNode3 = (TKeywordrectangle)nodeArrayList1.get(0);
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);
        tnumberNode5 = (TNumber)nodeArrayList3.get(0);

        prectangleNode2 = new AMakerectangleRectangle(tkeywordrectangleNode3, tnumberNode4, tnumberNode5, null, null);
        }

        pdrawNode1 = new ARectaDraw(prectangleNode2);
        }
	nodeList.add(pdrawNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce ARecta$Amakerectanglerectangle31Draw */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDraw pdrawNode1;
        {
            // Block
        PRectangle prectangleNode2;
        {
            // Block
        TKeywordrectangle tkeywordrectangleNode3;
        TNumber tnumberNode4;
        TNumber tnumberNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TColor tcolorNode7;
        tkeywordrectangleNode3 = (TKeywordrectangle)nodeArrayList1.get(0);
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);
        tnumberNode5 = (TNumber)nodeArrayList3.get(0);
        tcolorNode7 = (TColor)nodeArrayList4.get(0);

        prectangleNode2 = new AMakerectangleRectangle(tkeywordrectangleNode3, tnumberNode4, tnumberNode5, null, tcolorNode7);
        }

        pdrawNode1 = new ARectaDraw(prectangleNode2);
        }
	nodeList.add(pdrawNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce ARecta$Amakerectanglerectangle41Draw */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDraw pdrawNode1;
        {
            // Block
        PRectangle prectangleNode2;
        {
            // Block
        TKeywordrectangle tkeywordrectangleNode3;
        TNumber tnumberNode4;
        TNumber tnumberNode5;
        TColor tcolorNode6;
        TColor tcolorNode7;
        tkeywordrectangleNode3 = (TKeywordrectangle)nodeArrayList1.get(0);
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);
        tnumberNode5 = (TNumber)nodeArrayList3.get(0);
        tcolorNode6 = (TColor)nodeArrayList4.get(0);
        tcolorNode7 = (TColor)nodeArrayList5.get(0);

        prectangleNode2 = new AMakerectangleRectangle(tkeywordrectangleNode3, tnumberNode4, tnumberNode5, tcolorNode6, tcolorNode7);
        }

        pdrawNode1 = new ARectaDraw(prectangleNode2);
        }
	nodeList.add(pdrawNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce ARhom$Amakerhombusrhombus11Draw */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDraw pdrawNode1;
        {
            // Block
        PRhombus prhombusNode2;
        {
            // Block
        TKeywordrhombus tkeywordrhombusNode3;
        TNumber tnumberNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        @SuppressWarnings("unused") Object nullNode6 = null;
        tkeywordrhombusNode3 = (TKeywordrhombus)nodeArrayList1.get(0);
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);

        prhombusNode2 = new AMakerhombusRhombus(tkeywordrhombusNode3, tnumberNode4, null, null);
        }

        pdrawNode1 = new ARhomDraw(prhombusNode2);
        }
	nodeList.add(pdrawNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce ARhom$Amakerhombusrhombus31Draw */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDraw pdrawNode1;
        {
            // Block
        PRhombus prhombusNode2;
        {
            // Block
        TKeywordrhombus tkeywordrhombusNode3;
        TNumber tnumberNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TColor tcolorNode6;
        tkeywordrhombusNode3 = (TKeywordrhombus)nodeArrayList1.get(0);
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);
        tcolorNode6 = (TColor)nodeArrayList3.get(0);

        prhombusNode2 = new AMakerhombusRhombus(tkeywordrhombusNode3, tnumberNode4, null, tcolorNode6);
        }

        pdrawNode1 = new ARhomDraw(prhombusNode2);
        }
	nodeList.add(pdrawNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce ARhom$Amakerhombusrhombus41Draw */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDraw pdrawNode1;
        {
            // Block
        PRhombus prhombusNode2;
        {
            // Block
        TKeywordrhombus tkeywordrhombusNode3;
        TNumber tnumberNode4;
        TColor tcolorNode5;
        TColor tcolorNode6;
        tkeywordrhombusNode3 = (TKeywordrhombus)nodeArrayList1.get(0);
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);
        tcolorNode5 = (TColor)nodeArrayList3.get(0);
        tcolorNode6 = (TColor)nodeArrayList4.get(0);

        prhombusNode2 = new AMakerhombusRhombus(tkeywordrhombusNode3, tnumberNode4, tcolorNode5, tcolorNode6);
        }

        pdrawNode1 = new ARhomDraw(prhombusNode2);
        }
	nodeList.add(pdrawNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AFillrColorize */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PColorize pcolorizeNode1;
        {
            // Block
        TKeywordfill tkeywordfillNode2;
        LinkedList listNode4 = new LinkedList();
        tkeywordfillNode2 = (TKeywordfill)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcolorizeNode1 = new AFillrColorize(tkeywordfillNode2, listNode4);
        }
	nodeList.add(pcolorizeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AMarkConnect */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConnect pconnectNode1;
        {
            // Block
        PMarkpoint pmarkpointNode2;
        pmarkpointNode2 = (PMarkpoint)nodeArrayList1.get(0);

        pconnectNode1 = new AMarkConnect(pmarkpointNode2);
        }
	nodeList.add(pconnectNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AConnectcolConnect */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConnect pconnectNode1;
        {
            // Block
        PConnectcolor pconnectcolorNode2;
        pconnectcolorNode2 = (PConnectcolor)nodeArrayList1.get(0);

        pconnectNode1 = new AConnectcolConnect(pconnectcolorNode2);
        }
	nodeList.add(pconnectNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AChoosecolConnect */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConnect pconnectNode1;
        {
            // Block
        PChoosecolor pchoosecolorNode2;
        pchoosecolorNode2 = (PChoosecolor)nodeArrayList1.get(0);

        pconnectNode1 = new AChoosecolConnect(pchoosecolorNode2);
        }
	nodeList.add(pconnectNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AConnectcolorConnectcolor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConnectcolor pconnectcolorNode1;
        {
            // Block
        TKeywordconnect tkeywordconnectNode2;
        TColor tcolorNode3;
        TShape tshapeNode4;
        tkeywordconnectNode2 = (TKeywordconnect)nodeArrayList1.get(0);
        tcolorNode3 = (TColor)nodeArrayList2.get(0);
        tshapeNode4 = (TShape)nodeArrayList3.get(0);

        pconnectcolorNode1 = new AConnectcolorConnectcolor(tkeywordconnectNode2, tcolorNode3, tshapeNode4);
        }
	nodeList.add(pconnectcolorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AChooseChoosecolor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PChoosecolor pchoosecolorNode1;
        {
            // Block
        TKeywordchoose tkeywordchooseNode2;
        TColor tcolorNode3;
        tkeywordchooseNode2 = (TKeywordchoose)nodeArrayList1.get(0);
        tcolorNode3 = (TColor)nodeArrayList2.get(0);

        pchoosecolorNode1 = new AChooseChoosecolor(tkeywordchooseNode2, tcolorNode3);
        }
	nodeList.add(pchoosecolorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AMarkpoint */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMarkpoint pmarkpointNode1;
        {
            // Block
        TKeywordmark tkeywordmarkNode2;
        tkeywordmarkNode2 = (TKeywordmark)nodeArrayList1.get(0);

        pmarkpointNode1 = new AMarkpoint(tkeywordmarkNode2);
        }
	nodeList.add(pmarkpointNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AErasecolorErase */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PErase peraseNode1;
        {
            // Block
        TKeyworderase tkeyworderaseNode2;
        TColor tcolorNode3;
        tkeyworderaseNode2 = (TKeyworderase)nodeArrayList1.get(0);
        tcolorNode3 = (TColor)nodeArrayList2.get(0);

        peraseNode1 = new AErasecolorErase(tkeyworderaseNode2, tcolorNode3);
        }
	nodeList.add(peraseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce ATerminal$Color */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TColor tcolorNode1;
        tcolorNode1 = (TColor)nodeArrayList1.get(0);
	if(tcolorNode1 != null)
	{
	  listNode2.add(tcolorNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce ANonTerminal$Color */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        TColor tcolorNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tcolorNode2 = (TColor)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tcolorNode2 != null)
	{
	  listNode3.add(tcolorNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {16, SHIFT, 4}, },
			{{-1, ERROR, 2}, {21, ACCEPT, -1}, },
			{{-1, REDUCE, 1}, {2, SHIFT, 5}, {3, SHIFT, 6}, {4, SHIFT, 7}, {5, SHIFT, 8}, {6, SHIFT, 9}, {7, SHIFT, 10}, {8, SHIFT, 11}, {9, SHIFT, 12}, {10, SHIFT, 13}, {11, SHIFT, 14}, {12, SHIFT, 15}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 6}, {13, SHIFT, 26}, },
			{{-1, ERROR, 7}, {13, SHIFT, 27}, },
			{{-1, ERROR, 8}, {16, SHIFT, 28}, },
			{{-1, ERROR, 9}, {16, SHIFT, 29}, },
			{{-1, ERROR, 10}, {16, SHIFT, 30}, },
			{{-1, ERROR, 11}, {16, SHIFT, 31}, },
			{{-1, ERROR, 12}, {16, SHIFT, 32}, },
			{{-1, ERROR, 13}, {13, SHIFT, 33}, },
			{{-1, ERROR, 14}, {13, SHIFT, 35}, },
			{{-1, ERROR, 15}, {16, SHIFT, 36}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 2}, {2, SHIFT, 5}, {3, SHIFT, 6}, {4, SHIFT, 7}, {5, SHIFT, 8}, {6, SHIFT, 9}, {7, SHIFT, 10}, {8, SHIFT, 11}, {9, SHIFT, 12}, {10, SHIFT, 13}, {11, SHIFT, 14}, {12, SHIFT, 15}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 27}, {14, SHIFT, 38}, },
			{{-1, REDUCE, 10}, {13, SHIFT, 39}, },
			{{-1, REDUCE, 14}, {13, SHIFT, 40}, },
			{{-1, REDUCE, 17}, {13, SHIFT, 41}, {15, SHIFT, 42}, },
			{{-1, ERROR, 31}, {16, SHIFT, 43}, },
			{{-1, REDUCE, 27}, {13, SHIFT, 44}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 30}, {13, SHIFT, 45}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 11}, {13, SHIFT, 46}, },
			{{-1, REDUCE, 15}, {13, SHIFT, 47}, },
			{{-1, REDUCE, 20}, {13, SHIFT, 48}, {15, SHIFT, 49}, },
			{{-1, REDUCE, 18}, {13, SHIFT, 50}, },
			{{-1, REDUCE, 24}, {13, SHIFT, 51}, },
			{{-1, REDUCE, 28}, {13, SHIFT, 52}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 19}, {13, SHIFT, 53}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 25}, {13, SHIFT, 54}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 26}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 16}, {17, 37}, },
			{{-1, 17}, },
			{{-1, 3}, },
			{{-1, 18}, },
			{{-1, 19}, },
			{{-1, 20}, },
			{{-1, 21}, },
			{{-1, 22}, },
			{{-1, 23}, },
			{{-1, 24}, },
			{{-1, 25}, },
			{{-1, 34}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: keywordgrid",
			"expecting: number",
			"expecting: EOF",
			"expecting: keywordmark, keywordchoose, keywordconnect, keywordcircle, keywordsquare, keywordtriangle, keywordrectangle, keywordrhombus, keywordfill, keyworderase, direction, EOF",
			"expecting: color",
			"expecting: shape",
			"expecting: keywordmark, keywordchoose, keywordconnect, keywordcircle, keywordsquare, keywordtriangle, keywordrectangle, keywordrhombus, keywordfill, keyworderase, direction, color, EOF",
			"expecting: keywordmark, keywordchoose, keywordconnect, keywordcircle, keywordsquare, keywordtriangle, keywordrectangle, keywordrhombus, keywordfill, keyworderase, direction, color, tritype, EOF",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 3, 4, 4, 1, 1, 1, 1, 1, 4, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 6, 6, 7, 1, 6, 6, 6, 3, 3, 2, 3, 6, 6, 7, 6, 6, 6, 6, 3, 3, 3, 6, 3, 6, 3, 3, 3, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
