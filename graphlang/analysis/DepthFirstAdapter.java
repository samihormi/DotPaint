/* This file was generated by SableCC (http://www.sablecc.org/). */

package graphlang.analysis;

import java.util.*;
import graphlang.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getDefinegrid() != null)
        {
            node.getDefinegrid().apply(this);
        }
        if(node.getStmtlist() != null)
        {
            node.getStmtlist().apply(this);
        }
        outAProgram(node);
    }

    public void inAStmtStmtlist(AStmtStmtlist node)
    {
        defaultIn(node);
    }

    public void outAStmtStmtlist(AStmtStmtlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtStmtlist(AStmtStmtlist node)
    {
        inAStmtStmtlist(node);
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAStmtStmtlist(node);
    }

    public void inAListStmtlist(AListStmtlist node)
    {
        defaultIn(node);
    }

    public void outAListStmtlist(AListStmtlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListStmtlist(AListStmtlist node)
    {
        inAListStmtlist(node);
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getStmtlist() != null)
        {
            node.getStmtlist().apply(this);
        }
        outAListStmtlist(node);
    }

    public void inAMoveStmt(AMoveStmt node)
    {
        defaultIn(node);
    }

    public void outAMoveStmt(AMoveStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoveStmt(AMoveStmt node)
    {
        inAMoveStmt(node);
        if(node.getMove() != null)
        {
            node.getMove().apply(this);
        }
        outAMoveStmt(node);
    }

    public void inADrawStmt(ADrawStmt node)
    {
        defaultIn(node);
    }

    public void outADrawStmt(ADrawStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADrawStmt(ADrawStmt node)
    {
        inADrawStmt(node);
        if(node.getDraw() != null)
        {
            node.getDraw().apply(this);
        }
        outADrawStmt(node);
    }

    public void inADefineDefinegrid(ADefineDefinegrid node)
    {
        defaultIn(node);
    }

    public void outADefineDefinegrid(ADefineDefinegrid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefineDefinegrid(ADefineDefinegrid node)
    {
        inADefineDefinegrid(node);
        if(node.getKeywordgrid() != null)
        {
            node.getKeywordgrid().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outADefineDefinegrid(node);
    }

    public void inAMoveMove(AMoveMove node)
    {
        defaultIn(node);
    }

    public void outAMoveMove(AMoveMove node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoveMove(AMoveMove node)
    {
        inAMoveMove(node);
        if(node.getKeywordmove() != null)
        {
            node.getKeywordmove().apply(this);
        }
        if(node.getDirection() != null)
        {
            node.getDirection().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAMoveMove(node);
    }

    public void inAConnDraw(AConnDraw node)
    {
        defaultIn(node);
    }

    public void outAConnDraw(AConnDraw node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConnDraw(AConnDraw node)
    {
        inAConnDraw(node);
        if(node.getConnect() != null)
        {
            node.getConnect().apply(this);
        }
        outAConnDraw(node);
    }

    public void inACircDraw(ACircDraw node)
    {
        defaultIn(node);
    }

    public void outACircDraw(ACircDraw node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACircDraw(ACircDraw node)
    {
        inACircDraw(node);
        if(node.getCircle() != null)
        {
            node.getCircle().apply(this);
        }
        outACircDraw(node);
    }

    public void inAErasecolDraw(AErasecolDraw node)
    {
        defaultIn(node);
    }

    public void outAErasecolDraw(AErasecolDraw node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAErasecolDraw(AErasecolDraw node)
    {
        inAErasecolDraw(node);
        if(node.getErase() != null)
        {
            node.getErase().apply(this);
        }
        outAErasecolDraw(node);
    }

    public void inAMakecircleCircle(AMakecircleCircle node)
    {
        defaultIn(node);
    }

    public void outAMakecircleCircle(AMakecircleCircle node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMakecircleCircle(AMakecircleCircle node)
    {
        inAMakecircleCircle(node);
        if(node.getKeywordcircle() != null)
        {
            node.getKeywordcircle().apply(this);
        }
        if(node.getColor() != null)
        {
            node.getColor().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAMakecircleCircle(node);
    }

    public void inAMarkConnect(AMarkConnect node)
    {
        defaultIn(node);
    }

    public void outAMarkConnect(AMarkConnect node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkConnect(AMarkConnect node)
    {
        inAMarkConnect(node);
        if(node.getMarkpoint() != null)
        {
            node.getMarkpoint().apply(this);
        }
        outAMarkConnect(node);
    }

    public void inAConnectcolConnect(AConnectcolConnect node)
    {
        defaultIn(node);
    }

    public void outAConnectcolConnect(AConnectcolConnect node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConnectcolConnect(AConnectcolConnect node)
    {
        inAConnectcolConnect(node);
        if(node.getConnectcolor() != null)
        {
            node.getConnectcolor().apply(this);
        }
        outAConnectcolConnect(node);
    }

    public void inAChoosecolConnect(AChoosecolConnect node)
    {
        defaultIn(node);
    }

    public void outAChoosecolConnect(AChoosecolConnect node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChoosecolConnect(AChoosecolConnect node)
    {
        inAChoosecolConnect(node);
        if(node.getChoosecolor() != null)
        {
            node.getChoosecolor().apply(this);
        }
        outAChoosecolConnect(node);
    }

    public void inAConnectcolorConnectcolor(AConnectcolorConnectcolor node)
    {
        defaultIn(node);
    }

    public void outAConnectcolorConnectcolor(AConnectcolorConnectcolor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConnectcolorConnectcolor(AConnectcolorConnectcolor node)
    {
        inAConnectcolorConnectcolor(node);
        if(node.getKeywordconnect() != null)
        {
            node.getKeywordconnect().apply(this);
        }
        if(node.getColor() != null)
        {
            node.getColor().apply(this);
        }
        if(node.getShape() != null)
        {
            node.getShape().apply(this);
        }
        outAConnectcolorConnectcolor(node);
    }

    public void inAChooseChoosecolor(AChooseChoosecolor node)
    {
        defaultIn(node);
    }

    public void outAChooseChoosecolor(AChooseChoosecolor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChooseChoosecolor(AChooseChoosecolor node)
    {
        inAChooseChoosecolor(node);
        if(node.getKeywordchoose() != null)
        {
            node.getKeywordchoose().apply(this);
        }
        if(node.getColor() != null)
        {
            node.getColor().apply(this);
        }
        outAChooseChoosecolor(node);
    }

    public void inAMarkpoint(AMarkpoint node)
    {
        defaultIn(node);
    }

    public void outAMarkpoint(AMarkpoint node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkpoint(AMarkpoint node)
    {
        inAMarkpoint(node);
        if(node.getKeywordmark() != null)
        {
            node.getKeywordmark().apply(this);
        }
        outAMarkpoint(node);
    }

    public void inAErasecolorErase(AErasecolorErase node)
    {
        defaultIn(node);
    }

    public void outAErasecolorErase(AErasecolorErase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAErasecolorErase(AErasecolorErase node)
    {
        inAErasecolorErase(node);
        if(node.getKeyworderase() != null)
        {
            node.getKeyworderase().apply(this);
        }
        if(node.getColor() != null)
        {
            node.getColor().apply(this);
        }
        outAErasecolorErase(node);
    }
}
