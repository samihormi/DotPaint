/* This file was generated by SableCC (http://www.sablecc.org/). */

package graphlang.lexer;

import java.io.*;
import graphlang.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordgrid(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordmove(text, line, pos); }
    Token new2(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordmark(text, line, pos); }
    Token new3(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordchoose(text, line, pos); }
    Token new4(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordconnect(text, line, pos); }
    Token new5(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordcircle(text, line, pos); }
    Token new6(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeyworderase(text, line, pos); }
    Token new7(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDirection(text, line, pos); }
    Token new8(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TColor(text, line, pos); }
    Token new9(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TShape(text, line, pos); }
    Token new10(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNumber(text, line, pos); }
    Token new11(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOpsemicolon(line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOpequal(line, pos); }
    Token new14(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBlank(text, line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMinus(line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{10, 10, 1}, {13, 13, 2}, {32, 32, 3}, {45, 45, 4}, {48, 57, 5}, {59, 59, 6}, {61, 61, 7}, {65, 65, 8}, {66, 66, 9}, {67, 67, 10}, {68, 68, 11}, {69, 69, 12}, {70, 70, 8}, {71, 71, 13}, {72, 75, 8}, {76, 76, 14}, {77, 77, 15}, {78, 81, 8}, {82, 82, 16}, {83, 83, 17}, {84, 84, 8}, {85, 85, 18}, {86, 90, 8}, {97, 97, 19}, {98, 98, 20}, {99, 99, 21}, {100, 100, 22}, {101, 101, 23}, {102, 102, 19}, {103, 103, 24}, {104, 107, 19}, {108, 108, 25}, {109, 109, 26}, {110, 113, 19}, {114, 114, 27}, {115, 115, 28}, {116, 116, 19}, {117, 117, 29}, {118, 122, 19}, },
            {{10, 32, -2}, },
            {{10, 32, -2}, },
            {{10, 32, -2}, },
            {},
            {{48, 57, 5}, },
            {},
            {},
            {{65, 90, 8}, {97, 122, 19}, },
            {{65, 75, 8}, {76, 76, 30}, {77, 90, 8}, {97, 107, 19}, {108, 108, 31}, {109, 122, 19}, },
            {{65, 71, 8}, {72, 72, 32}, {73, 73, 33}, {74, 78, 8}, {79, 79, 34}, {80, 84, 8}, {85, 85, 35}, {86, 90, 8}, {97, 103, 19}, {104, 104, 36}, {105, 105, 37}, {106, 110, 19}, {111, 111, 38}, {112, 116, 19}, {117, 117, 39}, {118, 122, 19}, },
            {{65, 78, 8}, {79, 79, 40}, {80, 90, 8}, {97, 110, 19}, {111, 111, 41}, {112, 122, 19}, },
            {{65, 81, 8}, {82, 82, 42}, {83, 90, 8}, {97, 113, 19}, {114, 114, 43}, {115, 122, 19}, },
            {{65, 81, 8}, {82, 82, 44}, {83, 113, -14}, {114, 114, 45}, {115, 122, 19}, },
            {{65, 68, 8}, {69, 69, 46}, {70, 90, 8}, {97, 100, 19}, {101, 101, 47}, {102, 122, 19}, },
            {{65, 65, 48}, {66, 78, 8}, {79, 79, 49}, {80, 90, 8}, {97, 97, 50}, {98, 110, 19}, {111, 111, 51}, {112, 122, 19}, },
            {{65, 68, 8}, {69, 69, 52}, {70, 72, 8}, {73, 73, 53}, {74, 90, 8}, {97, 100, 19}, {101, 101, 54}, {102, 104, 19}, {105, 105, 55}, {106, 122, 19}, },
            {{65, 83, 8}, {84, 84, 56}, {85, 90, 8}, {97, 115, 19}, {116, 116, 57}, {117, 122, 19}, },
            {{65, 79, 8}, {80, 80, 58}, {81, 90, 8}, {97, 111, 19}, {112, 112, 59}, {113, 122, 19}, },
            {{65, 122, -10}, },
            {{65, 122, -11}, },
            {{65, 122, -12}, },
            {{65, 122, -13}, },
            {{65, 122, -14}, },
            {{65, 122, -15}, },
            {{65, 122, -16}, },
            {{65, 122, -17}, },
            {{65, 122, -18}, },
            {{65, 122, -19}, },
            {{65, 122, -20}, },
            {{65, 84, 8}, {85, 85, 60}, {86, 90, 8}, {97, 116, 19}, {117, 117, 61}, {118, 122, 19}, },
            {{65, 122, -32}, },
            {{65, 78, 8}, {79, 79, 62}, {80, 110, -13}, {111, 111, 63}, {112, 122, 19}, },
            {{65, 81, 8}, {82, 82, 64}, {83, 113, -14}, {114, 114, 65}, {115, 122, 19}, },
            {{65, 77, 8}, {78, 78, 66}, {79, 90, 8}, {97, 109, 19}, {110, 110, 67}, {111, 122, 19}, },
            {{65, 81, 8}, {82, 82, 68}, {83, 113, -14}, {114, 114, 69}, {115, 122, 19}, },
            {{65, 122, -34}, },
            {{65, 122, -35}, },
            {{65, 122, -36}, },
            {{65, 122, -37}, },
            {{65, 86, 8}, {87, 87, 70}, {88, 90, 8}, {97, 118, 19}, {119, 119, 71}, {120, 122, 19}, },
            {{65, 122, -42}, },
            {{65, 65, 72}, {66, 90, 8}, {97, 97, 73}, {98, 122, 19}, },
            {{65, 122, -44}, },
            {{65, 68, 8}, {69, 69, 74}, {70, 72, 8}, {73, 73, 75}, {74, 100, -18}, {101, 101, 76}, {102, 104, 19}, {105, 105, 77}, {106, 122, 19}, },
            {{65, 122, -46}, },
            {{65, 69, 8}, {70, 70, 78}, {71, 90, 8}, {97, 101, 19}, {102, 102, 79}, {103, 122, 19}, },
            {{65, 122, -48}, },
            {{65, 81, 8}, {82, 82, 80}, {83, 113, -14}, {114, 114, 81}, {115, 122, 19}, },
            {{65, 85, 8}, {86, 86, 82}, {87, 90, 8}, {97, 117, 19}, {118, 118, 83}, {119, 122, 19}, },
            {{65, 122, -50}, },
            {{65, 122, -51}, },
            {{65, 67, 8}, {68, 68, 84}, {69, 90, 8}, {97, 99, 19}, {100, 100, 85}, {101, 122, 19}, },
            {{65, 70, 8}, {71, 71, 86}, {72, 90, 8}, {97, 102, 19}, {103, 103, 87}, {104, 122, 19}, },
            {{65, 122, -54}, },
            {{65, 122, -55}, },
            {{65, 81, 8}, {82, 82, 88}, {83, 113, -14}, {114, 114, 89}, {115, 122, 19}, },
            {{65, 122, -58}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 68, 8}, {69, 69, 90}, {70, 100, -16}, {101, 101, 91}, {102, 122, 19}, },
            {{65, 122, -62}, },
            {{65, 78, 8}, {79, 79, 92}, {80, 110, -13}, {111, 111, 93}, {112, 122, 19}, },
            {{65, 122, -64}, },
            {{65, 66, 8}, {67, 67, 94}, {68, 90, 8}, {97, 98, 19}, {99, 99, 95}, {100, 122, 19}, },
            {{65, 122, -66}, },
            {{65, 77, 8}, {78, 78, 96}, {79, 109, -36}, {110, 110, 97}, {111, 122, 19}, },
            {{65, 122, -68}, },
            {{65, 85, 8}, {86, 86, 98}, {87, 117, -51}, {118, 118, 99}, {119, 122, 19}, },
            {{65, 122, -70}, },
            {{65, 77, 8}, {78, 78, 100}, {79, 109, -36}, {110, 110, 101}, {111, 122, 19}, },
            {{65, 122, -72}, },
            {{65, 82, 8}, {83, 83, 102}, {84, 90, 8}, {97, 114, 19}, {115, 115, 103}, {116, 122, 19}, },
            {{65, 122, -74}, },
            {{65, 68, 8}, {69, 69, 104}, {70, 100, -16}, {101, 101, 105}, {102, 122, 19}, },
            {{65, 67, 8}, {68, 68, 106}, {69, 99, -54}, {100, 100, 107}, {101, 122, 19}, },
            {{65, 122, -76}, },
            {{65, 122, -77}, },
            {{65, 83, 8}, {84, 84, 108}, {85, 115, -19}, {116, 116, 109}, {117, 122, 19}, },
            {{65, 122, -80}, },
            {{65, 74, 8}, {75, 75, 110}, {76, 90, 8}, {97, 106, 19}, {107, 107, 111}, {108, 122, 19}, },
            {{65, 122, -82}, },
            {{65, 68, 8}, {69, 69, 112}, {70, 100, -16}, {101, 101, 113}, {102, 122, 19}, },
            {{65, 122, -84}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 71, 8}, {72, 72, 114}, {73, 90, 8}, {97, 103, 19}, {104, 104, 115}, {105, 122, 19}, },
            {{65, 122, -88}, },
            {{65, 65, 116}, {66, 90, 8}, {97, 97, 117}, {98, 122, 19}, },
            {{65, 122, -90}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 82, 8}, {83, 83, 118}, {84, 114, -74}, {115, 115, 119}, {116, 122, 19}, },
            {{65, 122, -94}, },
            {{65, 75, 8}, {76, 76, 120}, {77, 107, -11}, {108, 108, 121}, {109, 122, 19}, },
            {{65, 122, -96}, },
            {{65, 68, 8}, {69, 69, 122}, {70, 100, -16}, {101, 101, 123}, {102, 122, 19}, },
            {{65, 122, -98}, },
            {{65, 68, 8}, {69, 69, 124}, {70, 100, -16}, {101, 101, 125}, {102, 122, 19}, },
            {{65, 122, -100}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 68, 8}, {69, 69, 126}, {70, 100, -16}, {101, 101, 127}, {102, 122, 19}, },
            {{65, 122, -104}, },
            {{65, 77, 8}, {78, 78, 128}, {79, 109, -36}, {110, 110, 129}, {111, 122, 19}, },
            {{65, 122, -106}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 83, 8}, {84, 84, 130}, {85, 115, -19}, {116, 116, 131}, {117, 122, 19}, },
            {{65, 122, -116}, },
            {{65, 72, 8}, {73, 73, 132}, {74, 90, 8}, {97, 104, 19}, {105, 105, 133}, {106, 122, 19}, },
            {{65, 122, -118}, },
            {{65, 68, 8}, {69, 69, 134}, {70, 100, -16}, {101, 101, 135}, {102, 122, 19}, },
            {{65, 122, -120}, },
            {{65, 68, 8}, {69, 69, 136}, {70, 100, -16}, {101, 101, 137}, {102, 122, 19}, },
            {{65, 122, -122}, },
            {{65, 66, 8}, {67, 67, 138}, {68, 98, -66}, {99, 99, 139}, {100, 122, 19}, },
            {{65, 122, -124}, },
            {{65, 67, 8}, {68, 68, 140}, {69, 99, -54}, {100, 100, 141}, {101, 122, 19}, },
            {{65, 122, -126}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 70, 8}, {71, 71, 142}, {72, 102, -55}, {103, 103, 143}, {104, 122, 19}, },
            {{65, 122, -134}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 83, 8}, {84, 84, 144}, {85, 115, -19}, {116, 116, 145}, {117, 122, 19}, },
            {{65, 122, -140}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 71, 8}, {72, 72, 146}, {73, 103, -88}, {104, 104, 147}, {105, 122, 19}, },
            {{65, 122, -144}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 83, 8}, {84, 84, 148}, {85, 115, -19}, {116, 116, 149}, {117, 122, 19}, },
            {{65, 122, -148}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {8, 14, 14, 14, 15, 10, 12, 13, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 7, 7, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 8, 8, 11, 11, 11, 11, 8, 8, 11, 11, 11, 11, 11, 11, 11, 11, 7, 7, 11, 11, 11, 11, 0, 0, 7, 7, 2, 2, 1, 1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6, 6, 8, 8, 7, 7, 11, 11, 3, 3, 5, 5, 11, 11, 9, 9, 11, 11, 4, 4, 11, 11, 9, 9, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
