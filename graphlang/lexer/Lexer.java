/* This file was generated by SableCC (http://www.sablecc.org/). */

package graphlang.lexer;

import java.io.*;
import graphlang.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordmake(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordmove(text, line, pos); }
    Token new2(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordmark(text, line, pos); }
    Token new3(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordchoose(text, line, pos); }
    Token new4(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordconnect(text, line, pos); }
    Token new5(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordcircle(text, line, pos); }
    Token new6(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeyworderase(text, line, pos); }
    Token new7(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDirection(text, line, pos); }
    Token new8(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TColor(text, line, pos); }
    Token new9(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TShape(text, line, pos); }
    Token new10(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNumber(text, line, pos); }
    Token new11(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOpsemicolon(line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOpequal(line, pos); }
    Token new14(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBlank(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{10, 10, 1}, {13, 13, 2}, {32, 32, 3}, {48, 57, 4}, {59, 59, 5}, {61, 61, 6}, {65, 65, 7}, {66, 66, 8}, {67, 67, 9}, {68, 68, 10}, {69, 69, 11}, {70, 70, 7}, {71, 71, 12}, {72, 75, 7}, {76, 76, 13}, {77, 77, 14}, {78, 81, 7}, {82, 82, 15}, {83, 83, 16}, {84, 84, 7}, {85, 85, 17}, {86, 90, 7}, {97, 97, 18}, {98, 98, 19}, {99, 99, 20}, {100, 100, 21}, {101, 101, 22}, {102, 102, 18}, {103, 103, 23}, {104, 107, 18}, {108, 108, 24}, {109, 109, 25}, {110, 113, 18}, {114, 114, 26}, {115, 115, 27}, {116, 116, 18}, {117, 117, 28}, {118, 122, 18}, },
            {{10, 32, -2}, },
            {{10, 32, -2}, },
            {{10, 32, -2}, },
            {{48, 57, 4}, },
            {},
            {},
            {{65, 90, 7}, {97, 122, 18}, },
            {{65, 75, 7}, {76, 76, 29}, {77, 90, 7}, {97, 107, 18}, {108, 108, 30}, {109, 122, 18}, },
            {{65, 71, 7}, {72, 72, 31}, {73, 73, 32}, {74, 78, 7}, {79, 79, 33}, {80, 84, 7}, {85, 85, 34}, {86, 90, 7}, {97, 103, 18}, {104, 104, 35}, {105, 105, 36}, {106, 110, 18}, {111, 111, 37}, {112, 116, 18}, {117, 117, 38}, {118, 122, 18}, },
            {{65, 78, 7}, {79, 79, 39}, {80, 90, 7}, {97, 110, 18}, {111, 111, 40}, {112, 122, 18}, },
            {{65, 81, 7}, {82, 82, 41}, {83, 90, 7}, {97, 113, 18}, {114, 114, 42}, {115, 122, 18}, },
            {{65, 81, 7}, {82, 82, 43}, {83, 113, -13}, {114, 114, 44}, {115, 122, 18}, },
            {{65, 68, 7}, {69, 69, 45}, {70, 90, 7}, {97, 100, 18}, {101, 101, 46}, {102, 122, 18}, },
            {{65, 65, 47}, {66, 78, 7}, {79, 79, 48}, {80, 90, 7}, {97, 97, 49}, {98, 110, 18}, {111, 111, 50}, {112, 122, 18}, },
            {{65, 68, 7}, {69, 69, 51}, {70, 72, 7}, {73, 73, 52}, {74, 90, 7}, {97, 100, 18}, {101, 101, 53}, {102, 104, 18}, {105, 105, 54}, {106, 122, 18}, },
            {{65, 83, 7}, {84, 84, 55}, {85, 90, 7}, {97, 115, 18}, {116, 116, 56}, {117, 122, 18}, },
            {{65, 79, 7}, {80, 80, 57}, {81, 90, 7}, {97, 111, 18}, {112, 112, 58}, {113, 122, 18}, },
            {{65, 122, -9}, },
            {{65, 122, -10}, },
            {{65, 122, -11}, },
            {{65, 122, -12}, },
            {{65, 122, -13}, },
            {{65, 122, -14}, },
            {{65, 122, -15}, },
            {{65, 122, -16}, },
            {{65, 122, -17}, },
            {{65, 122, -18}, },
            {{65, 122, -19}, },
            {{65, 84, 7}, {85, 85, 59}, {86, 90, 7}, {97, 116, 18}, {117, 117, 60}, {118, 122, 18}, },
            {{65, 122, -31}, },
            {{65, 78, 7}, {79, 79, 61}, {80, 110, -12}, {111, 111, 62}, {112, 122, 18}, },
            {{65, 81, 7}, {82, 82, 63}, {83, 113, -13}, {114, 114, 64}, {115, 122, 18}, },
            {{65, 77, 7}, {78, 78, 65}, {79, 90, 7}, {97, 109, 18}, {110, 110, 66}, {111, 122, 18}, },
            {{65, 81, 7}, {82, 82, 67}, {83, 113, -13}, {114, 114, 68}, {115, 122, 18}, },
            {{65, 122, -33}, },
            {{65, 122, -34}, },
            {{65, 122, -35}, },
            {{65, 122, -36}, },
            {{65, 86, 7}, {87, 87, 69}, {88, 90, 7}, {97, 118, 18}, {119, 119, 70}, {120, 122, 18}, },
            {{65, 122, -41}, },
            {{65, 65, 71}, {66, 90, 7}, {97, 97, 72}, {98, 122, 18}, },
            {{65, 122, -43}, },
            {{65, 68, 7}, {69, 69, 73}, {70, 100, -15}, {101, 101, 74}, {102, 122, 18}, },
            {{65, 122, -45}, },
            {{65, 69, 7}, {70, 70, 75}, {71, 90, 7}, {97, 101, 18}, {102, 102, 76}, {103, 122, 18}, },
            {{65, 122, -47}, },
            {{65, 74, 7}, {75, 75, 77}, {76, 81, 7}, {82, 82, 78}, {83, 90, 7}, {97, 106, 18}, {107, 107, 79}, {108, 113, 18}, {114, 114, 80}, {115, 122, 18}, },
            {{65, 85, 7}, {86, 86, 81}, {87, 90, 7}, {97, 117, 18}, {118, 118, 82}, {119, 122, 18}, },
            {{65, 122, -49}, },
            {{65, 122, -50}, },
            {{65, 67, 7}, {68, 68, 83}, {69, 90, 7}, {97, 99, 18}, {100, 100, 84}, {101, 122, 18}, },
            {{65, 70, 7}, {71, 71, 85}, {72, 90, 7}, {97, 102, 18}, {103, 103, 86}, {104, 122, 18}, },
            {{65, 122, -53}, },
            {{65, 122, -54}, },
            {{65, 81, 7}, {82, 82, 87}, {83, 113, -13}, {114, 114, 88}, {115, 122, 18}, },
            {{65, 122, -57}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
            {{65, 68, 7}, {69, 69, 89}, {70, 100, -15}, {101, 101, 90}, {102, 122, 18}, },
            {{65, 122, -61}, },
            {{65, 78, 7}, {79, 79, 91}, {80, 110, -12}, {111, 111, 92}, {112, 122, 18}, },
            {{65, 122, -63}, },
            {{65, 66, 7}, {67, 67, 93}, {68, 90, 7}, {97, 98, 18}, {99, 99, 94}, {100, 122, 18}, },
            {{65, 122, -65}, },
            {{65, 77, 7}, {78, 78, 95}, {79, 109, -35}, {110, 110, 96}, {111, 122, 18}, },
            {{65, 122, -67}, },
            {{65, 85, 7}, {86, 86, 97}, {87, 117, -50}, {118, 118, 98}, {119, 122, 18}, },
            {{65, 122, -69}, },
            {{65, 77, 7}, {78, 78, 99}, {79, 109, -35}, {110, 110, 100}, {111, 122, 18}, },
            {{65, 122, -71}, },
            {{65, 82, 7}, {83, 83, 101}, {84, 90, 7}, {97, 114, 18}, {115, 115, 102}, {116, 122, 18}, },
            {{65, 122, -73}, },
            {{65, 68, 7}, {69, 69, 103}, {70, 100, -15}, {101, 101, 104}, {102, 122, 18}, },
            {{65, 122, -75}, },
            {{65, 83, 7}, {84, 84, 105}, {85, 115, -18}, {116, 116, 106}, {117, 122, 18}, },
            {{65, 122, -77}, },
            {{65, 68, 7}, {69, 69, 107}, {70, 100, -15}, {101, 101, 108}, {102, 122, 18}, },
            {{65, 74, 7}, {75, 75, 109}, {76, 90, 7}, {97, 106, 18}, {107, 107, 110}, {108, 122, 18}, },
            {{65, 122, -79}, },
            {{65, 122, -80}, },
            {{65, 68, 7}, {69, 69, 111}, {70, 100, -15}, {101, 101, 112}, {102, 122, 18}, },
            {{65, 122, -83}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
            {{65, 71, 7}, {72, 72, 113}, {73, 90, 7}, {97, 103, 18}, {104, 104, 114}, {105, 122, 18}, },
            {{65, 122, -87}, },
            {{65, 65, 115}, {66, 90, 7}, {97, 97, 116}, {98, 122, 18}, },
            {{65, 122, -89}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
            {{65, 82, 7}, {83, 83, 117}, {84, 114, -73}, {115, 115, 118}, {116, 122, 18}, },
            {{65, 122, -93}, },
            {{65, 75, 7}, {76, 76, 119}, {77, 107, -10}, {108, 108, 120}, {109, 122, 18}, },
            {{65, 122, -95}, },
            {{65, 68, 7}, {69, 69, 121}, {70, 100, -15}, {101, 101, 122}, {102, 122, 18}, },
            {{65, 122, -97}, },
            {{65, 68, 7}, {69, 69, 123}, {70, 100, -15}, {101, 101, 124}, {102, 122, 18}, },
            {{65, 122, -99}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
            {{65, 68, 7}, {69, 69, 125}, {70, 100, -15}, {101, 101, 126}, {102, 122, 18}, },
            {{65, 122, -103}, },
            {{65, 77, 7}, {78, 78, 127}, {79, 109, -35}, {110, 110, 128}, {111, 122, 18}, },
            {{65, 122, -105}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
            {{65, 83, 7}, {84, 84, 129}, {85, 115, -18}, {116, 116, 130}, {117, 122, 18}, },
            {{65, 122, -115}, },
            {{65, 72, 7}, {73, 73, 131}, {74, 90, 7}, {97, 104, 18}, {105, 105, 132}, {106, 122, 18}, },
            {{65, 122, -117}, },
            {{65, 68, 7}, {69, 69, 133}, {70, 100, -15}, {101, 101, 134}, {102, 122, 18}, },
            {{65, 122, -119}, },
            {{65, 68, 7}, {69, 69, 135}, {70, 100, -15}, {101, 101, 136}, {102, 122, 18}, },
            {{65, 122, -121}, },
            {{65, 66, 7}, {67, 67, 137}, {68, 98, -65}, {99, 99, 138}, {100, 122, 18}, },
            {{65, 122, -123}, },
            {{65, 67, 7}, {68, 68, 139}, {69, 99, -53}, {100, 100, 140}, {101, 122, 18}, },
            {{65, 122, -125}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
            {{65, 70, 7}, {71, 71, 141}, {72, 102, -54}, {103, 103, 142}, {104, 122, 18}, },
            {{65, 122, -133}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
            {{65, 83, 7}, {84, 84, 143}, {85, 115, -18}, {116, 116, 144}, {117, 122, 18}, },
            {{65, 122, -139}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
            {{65, 71, 7}, {72, 72, 145}, {73, 103, -87}, {104, 104, 146}, {105, 122, 18}, },
            {{65, 122, -143}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
            {{65, 83, 7}, {84, 84, 147}, {85, 115, -18}, {116, 116, 148}, {117, 122, 18}, },
            {{65, 122, -147}, },
            {{65, 122, -9}, },
            {{65, 122, -9}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 14, 14, 14, 10, 12, 13, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 7, 7, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 8, 8, 11, 11, 11, 11, 8, 8, 11, 11, 11, 11, 11, 11, 11, 11, 7, 7, 11, 11, 11, 11, 7, 7, 0, 0, 2, 2, 1, 1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6, 6, 8, 8, 7, 7, 11, 11, 3, 3, 5, 5, 11, 11, 9, 9, 11, 11, 4, 4, 11, 11, 9, 9, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
