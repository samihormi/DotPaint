/* This file was generated by SableCC (http://www.sablecc.org/). */

package graphlang.node;

import graphlang.analysis.*;

@SuppressWarnings("nls")
public final class AConnectcolorConnectcolor extends PConnectcolor
{
    private TKeywordconnect _keywordconnect_;
    private TColor _color_;
    private TShape _shape_;

    public AConnectcolorConnectcolor()
    {
        // Constructor
    }

    public AConnectcolorConnectcolor(
        @SuppressWarnings("hiding") TKeywordconnect _keywordconnect_,
        @SuppressWarnings("hiding") TColor _color_,
        @SuppressWarnings("hiding") TShape _shape_)
    {
        // Constructor
        setKeywordconnect(_keywordconnect_);

        setColor(_color_);

        setShape(_shape_);

    }

    @Override
    public Object clone()
    {
        return new AConnectcolorConnectcolor(
            cloneNode(this._keywordconnect_),
            cloneNode(this._color_),
            cloneNode(this._shape_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConnectcolorConnectcolor(this);
    }

    public TKeywordconnect getKeywordconnect()
    {
        return this._keywordconnect_;
    }

    public void setKeywordconnect(TKeywordconnect node)
    {
        if(this._keywordconnect_ != null)
        {
            this._keywordconnect_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._keywordconnect_ = node;
    }

    public TColor getColor()
    {
        return this._color_;
    }

    public void setColor(TColor node)
    {
        if(this._color_ != null)
        {
            this._color_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._color_ = node;
    }

    public TShape getShape()
    {
        return this._shape_;
    }

    public void setShape(TShape node)
    {
        if(this._shape_ != null)
        {
            this._shape_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._shape_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._keywordconnect_)
            + toString(this._color_)
            + toString(this._shape_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._keywordconnect_ == child)
        {
            this._keywordconnect_ = null;
            return;
        }

        if(this._color_ == child)
        {
            this._color_ = null;
            return;
        }

        if(this._shape_ == child)
        {
            this._shape_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._keywordconnect_ == oldChild)
        {
            setKeywordconnect((TKeywordconnect) newChild);
            return;
        }

        if(this._color_ == oldChild)
        {
            setColor((TColor) newChild);
            return;
        }

        if(this._shape_ == oldChild)
        {
            setShape((TShape) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
