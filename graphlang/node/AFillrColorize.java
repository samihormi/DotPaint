/* This file was generated by SableCC (http://www.sablecc.org/). */

package graphlang.node;

import java.util.*;
import graphlang.analysis.*;

@SuppressWarnings("nls")
public final class AFillrColorize extends PColorize
{
    private TKeywordfill _keywordfill_;
    private final LinkedList<TColor> _color_ = new LinkedList<TColor>();

    public AFillrColorize()
    {
        // Constructor
    }

    public AFillrColorize(
        @SuppressWarnings("hiding") TKeywordfill _keywordfill_,
        @SuppressWarnings("hiding") List<TColor> _color_)
    {
        // Constructor
        setKeywordfill(_keywordfill_);

        setColor(_color_);

    }

    @Override
    public Object clone()
    {
        return new AFillrColorize(
            cloneNode(this._keywordfill_),
            cloneList(this._color_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFillrColorize(this);
    }

    public TKeywordfill getKeywordfill()
    {
        return this._keywordfill_;
    }

    public void setKeywordfill(TKeywordfill node)
    {
        if(this._keywordfill_ != null)
        {
            this._keywordfill_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._keywordfill_ = node;
    }

    public LinkedList<TColor> getColor()
    {
        return this._color_;
    }

    public void setColor(List<TColor> list)
    {
        this._color_.clear();
        this._color_.addAll(list);
        for(TColor e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._keywordfill_)
            + toString(this._color_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._keywordfill_ == child)
        {
            this._keywordfill_ = null;
            return;
        }

        if(this._color_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._keywordfill_ == oldChild)
        {
            setKeywordfill((TKeywordfill) newChild);
            return;
        }

        for(ListIterator<TColor> i = this._color_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TColor) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
